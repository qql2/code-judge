"use strict";
(() => {
  // src/kit.ts
  var Kit = class {
    constructor() {
    }
    static binarySearchInOrder(rcds, left = 0, right = rcds.length - 1) {
      let low = left;
      return (key) => {
        const rst = this.binarySearch(rcds, key, low, right);
        if (rst.mid != -1 && rst.mid != 0)
          low = rst.mid - 1;
        else {
          if (rst.low != -1)
            low = rst.low;
        }
        return rst;
      };
    }
    static binarySearch(rcds, key, left = 0, right = rcds.length - 1) {
      let low = left - 1, high = right + 1, mid;
      for (; low + 1 != high; ) {
        mid = low + high >> 1;
        if (rcds[mid] == key) {
          return { low: -1, mid, high: -1 };
        } else if (rcds[mid] < key) {
          low = mid;
        } else {
          high = mid;
        }
      }
      return { low, mid: -1, high };
    }
  };

  // src/index.ts
  var CodeJudge = class {
    constructor() {
    }
    static IsInAnyCodeBlock(markdown, index) {
      let mutiCodePos = this.getMutiCode(markdown);
      let midCodePos = this.getMidleCode(markdown, mutiCodePos);
      let littleCodePos = this.getLitleCode(markdown, mutiCodePos, midCodePos);
      let IsInMutiCode = this.IsInSomeCode(mutiCodePos);
      let IsInMidCode = this.IsInSomeCode(midCodePos);
      let IsInLittleCode = this.IsInSomeCode(littleCodePos);
      if (IsInMutiCode(index) || IsInMidCode(index) || IsInLittleCode(index))
        return true;
      return false;
    }
    /** 获得所有大代码块(即```代码块)的位置索引 */
    static getMutiCode(markdown) {
      let codesOfs = [];
      let rgx = new RegExp("(?<=\\n)( |\\t)*(```)", "g");
      markdown.replace(rgx, (word, ...args) => {
        codesOfs.push(args.slice(-2)[0]);
        return word;
      });
      return codesOfs;
    }
    /** 获得所有中代码块(即``代码块)的位置索引 */
    static getMidleCode(markdown, mutiCodeOfs) {
      if (!mutiCodeOfs) {
        mutiCodeOfs = this.getMutiCode(markdown);
      }
      const rgx = /(``).+?(``)/g;
      let midlecodePos = [];
      let IsInMutiCode = this.IsInSomeCode(mutiCodeOfs);
      markdown.replace(rgx, (word, ...args) => {
        let index = args.slice(-2)[0];
        if (IsInMutiCode(index))
          return word;
        let start = index;
        let end = index + word.length;
        midlecodePos.push(start, end);
      });
      IsInMutiCode = null;
      return midlecodePos;
    }
    /**  获得所有小代码块(即`代码块)的位置索引 */
    static getLitleCode(markdown, mutiCodeOfs, midCodePos) {
      if (!mutiCodeOfs) {
        mutiCodeOfs = this.getMutiCode(markdown);
      }
      if (!midCodePos) {
        midCodePos = this.getMidleCode(markdown, mutiCodeOfs);
      }
      const rgx = new RegExp("((?<!`)`)(.(?<!`))+(`(?!`))", "g");
      let litleCodePos = [];
      let IsInMutiCode = this.IsInSomeCode(mutiCodeOfs);
      let IsInMidCode = this.IsInSomeCode(midCodePos);
      markdown.replace(rgx, (word, ...args) => {
        let index = args.slice(-2)[0];
        if (IsInMutiCode(index))
          return word;
        if (IsInMidCode(index))
          return word;
        let start = index;
        let end = index + word.length;
        litleCodePos.push(start, end);
        return word;
      });
      IsInMutiCode = null;
      return litleCodePos;
    }
    static IsInSomeCode(Codes) {
      let search = Kit.binarySearchInOrder(Codes);
      return (index) => {
        let rst = search(index);
        if (rst.mid != -1)
          return false;
        if (rst.low == -1)
          return false;
        if (rst.low % 2 == 0)
          return true;
        return false;
      };
    }
  };
})();
//# sourceMappingURL=data:application/json;base64,
